#/!/bin/bash
#!shellscript

OPTIND=1 # Reset in case getopts has been used previously in the shell.
POSIXLY_CORRECT=yes

declare -r DEFAULT_WIDTH=100

function main() {
    show_histogram=0

    # evaluates flags with their's parameters and calls their functions
    get_flags $@
    # sets cmd variable to command name or 0 if no command
    set_command $@
    #prints file names
    num_files=0
    process_files $@
    if [ $num_files = 0 ]; then

        file="$(cat)"
        header="$(echo "$file" | head -n 1)"
        file="$(echo "$file" | sed 1,1d)"
        apply_requirements
        apply_commands
    fi

}

function get_flags() {
    local opt
    error=0
    while getopts ":abgsh" opt; do
        case $opt in
        a)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                a=$nextopt
            else
                a=""
            fi
            after
            ;;
        b)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                b=$nextopt
            else
                b=""
            fi
            before
            ;;
        g)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                g=$nextopt
            else
                g=""
            fi
            gender
            ;;

        s)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                s=$nextopt
            else
                s="default"
            fi
            case $s in
            infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
                s="default"
                OPTIND=$((OPTIND - 1))
                ;;
            esac
            show_histogram=1
            ;;
        h) help ;;
        esac
    done
    if [ $error = 1 ]; then
        exit 1
    fi
}

function after() {
    if [ -z $a ]; then
        echo "Parameter to flag -a is required"
        error=1
        return
    fi
    if ! [[ $a =~ ^[0-9]{4}-(02-(0[1-9]|[12][0-9])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))$ ]]; then
        echo "Invalid date format"
        exit 1
    fi
}

function before() {
    if [ -z $b ]; then
        echo "Parameter to flag -b is required"
        error=1
        return
    fi
    if ! [[ $b =~ ^[0-9]{4}-(02-(0[1-9]|[12][0-9])|(0[469]|11)-(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))$ ]]; then
        echo "Invalid date format"
        exit 1
    fi
}

function gender() {
    if [ -z $g ]; then
        echo "Parameter to flag -g is required"
        error=1
        return
    fi
    if ! [[ $g == "M" || $g == "Z" ]]; then
        echo "Invalid gender type"
        error=1
    fi
}

function help() {
    echo "Help"
    exit 0
}

function set_command() {
    eval cmd=\${$OPTIND}
    case $cmd in
    infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions) OPTIND=$((OPTIND + 1)) ;;
    *) cmd=0 ;;
    esac
}

function process_files() {
    file=""
    while true; do
        eval param=\${$OPTIND}
        if [ -z $param ]; then
            break
        else
            OPTIND=$((OPTIND + 1))
            num_files=$((num_files + 1))
            if [ $num_files != 1 ]; then
                new_file=$($param | sed 1,1d)
                file="$file 
$new_file"
            else
                header="$(cat $param | head -n 1)"
                file="$(cat "$param" | sed 1,1d)"
            fi
        fi
    done
    if [ $num_files -ne "0" ]; then
        apply_requirements
        apply_commands
    fi
}

function apply_requirements {

    if [ $cmd = "merge" ] || [ $cmd = "0" ]; then
        echo "$header"
    fi

    if [[ $a != "" ]] || [[ $b != "" ]] || [[ $c != "" ]]; then
        filtered_output=$(echo "$file" | awk -F "," -v after_date=$a -v before_date=$b -v gender=$g '
        {
            if (NR>1)
            {
                # apply filters if there are any
                    if (length(after_date) > 0) {
                        if (after_date > $2) {
                            {next}
                        }
                    }
                    if (length(before_date) > 0) {
                        if (before_date < $2) {
                            {next}
                        }
                    }
                    if (length(gender) > 0) {
                        if (gender != $4) {
                            {next}
                        }
                    }

                #apply function if there is one
                {print}
            }
        }
    ')
    else
        filtered_output=$(echo "$file")
    fi

}

function apply_commands {
    case $cmd in
    infected)
        infected_fun
        break
        ;;
    merge)
        echo "$filtered_output"
        break
        ;;
    gender)
        gender_fun
        break
        ;;
    age)
        age_fun
        break
        ;;
    daily)
        daily_fun
        break
        ;;
    monthly)
        monthly_fun
        break
        ;;
    yearly)
        yearly_fun
        break
        ;;
    countries)
        echo "$filtered_output"
        break
        ;;
    districts)
        echo "$filtered_output"
        break
        ;;
    regions)
        echo "$filtered_output"
        break
        ;;
    0)
        echo "$filtered_output"
        break
        ;;
    esac
}

function infected_fun {
    echo $(echo "$filtered_output" | wc -l)
}

function gender_fun {

    echo "$filtered_output" | awk -F "," -v show_histogram=$show_histogram -v s=$s -v default_s=100000 '
        BEGIN {
            M = 0
            Z = 0
            if (s=="default") {
                s=default_s
            }
        }
        {                   
            if ("M" == $4) {M++}
            if ("Z" == $4) {Z++}
        }
        END {
            if (show_histogram == 0) {
                print("M:",M)
                print("Z:",Z)
            }
            else {
                printf("M: ")
                M_hashes = int(M/s)
                for (i=0; i < M_hashes; i++) {
                    printf("#")
                }
                printf("\n")
                printf("Z: ")
                Z_hashes = int(Z/s)
                for (i=0; i < Z_hashes; i++) {
                    printf("#")
                }
                printf("\n")

            }
        }
    '
}

function age_fun {

    echo "$filtered_output" | awk -F "," -v show_histogram=$show_histogram -v s=$s -v default_s=10000 '
        function print_hash(num_hashes) {
            for (i=0; i<num_hashes; i++) {
                printf("#")
            }
            printf("\n")
        }
        BEGIN {
            a[0] = 0
            a[1] = 0
            a[2] = 0
            a[3] = 0
            a[4] = 0
            a[5] = 0
            a[6] = 0
            a[7] = 0
            a[8] = 0
            a[9] = 0
            a[10] = 0
            a[11] = 0
            if (s=="default") {
                s=default_s
            }
        }
        {
            if ($3 <= 5) {a[0]++}
            if ($3 >= 6 && $3 <=15) {a[1]++}
            if ($3 >= 16 && $3 <=25) {a[2]++}
            if ($3 >= 26 && $3 <=35) {a[3]++}
            if ($3 >= 36 && $3 <=45) {a[4]++}
            if ($3 >= 46 && $3 <=55) {a[5]++}
            if ($3 >= 56 && $3 <=65) {a[6]++}
            if ($3 >= 66 && $3 <=75) {a[7]++}
            if ($3 >= 76 && $3 <=85) {a[8]++}
            if ($3 >= 86 && $3 <=95) {a[9]++}
            if ($3 >= 96 && $3 <=105) {a[10]++}
            if ($3 >= 105 ) {a[11]++}
        }
        END {
                if (show_histogram == 0) {
                    printf("0-5   :%s\n", a[0])
                    printf("6-15  :%s\n", a[1])
                    printf("16-25 :%s\n", a[2])
                    printf("26-35 :%s\n", a[3])
                    printf("36-45 :%s\n", a[4])
                    printf("46-55 :%s\n", a[5])
                    printf("56-65 :%s\n", a[6])
                    printf("66-75 :%s\n", a[7])
                    printf("76-85 :%s\n", a[8])
                    printf("86-95 :%s\n", a[9])
                    printf("96-105:%s\n", a[10])
                    printf(">105  :%s\n", a[11])
                }
                else {
                    printf("0-5   :")
                    print_hash(int(a[0]/s))
                    printf("6-15  :")
                    print_hash(int(a[1]/s))
                    printf("16-25 :")
                    print_hash(int(a[2]/s))
                    printf("26-35 :")
                    print_hash(int(a[3]/s))
                    printf("36-45 :")
                    print_hash(int(a[4]/s))
                    printf("46-55 :")
                    print_hash(int(a[5]/s))
                    printf("56-65 :")
                    print_hash(int(a[6]/s))
                    printf("66-75 :")
                    print_hash(int(a[7]/s))
                    printf("76-85 :")
                    print_hash(int(a[8]/s))
                    printf("86-95 :")
                    print_hash(int(a[9]/s))
                    printf("96-105:")
                    print_hash(int(a[10]/s))
                    printf(">105  :")
                    print_hash(int(a[11]/s))
                }
        }
    '
}

function time_grouped {
    cut_size=$1
    default_s=$2
    echo "$filtered_output" | awk -F "," -v cut_size=$cut_size '{print(substr($2, 1, length($2)-cut_size))}' | sort | uniq -c | awk -F " " -v show_histogram=$show_histogram -v s=$s -v default_s=$default_s '
        BEGIN {
            if (s=="default") {
                s=default_s
            }
        }
        {
            if (show_histogram == 0) {
                {printf("%s: %s\n", $2, $1)}
            }
            else {
                printf("%s:", $2)
                num_hashes=int($1/s)
                for (i=0; i<num_hashes; i++) {
                    printf("#")
                }
                printf("\n")
            }
        }
    '
}

function daily_fun {
    time_grouped 0 500
}

function monthly_fun {
    time_grouped 3 10000
}

function yearly_fun {
    time_grouped 6 100000
}



main $@
