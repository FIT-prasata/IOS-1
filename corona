#/!/bin/bash
#!shellscript

OPTIND=1 # Reset in case getopts has been used previously in the shell.
POSIXLY_CORRECT=yes

declare -r DEFAULT_WIDTH=100

function main() {
    # evaluates flags with their's parameters and calls their functions
    get_flags $@
    # sets cmd variable to command name or 0 if no command
    set_command $@
    #prints file names
    num_files=0
    process_files $@
    if [ $num_files = 0 ]; then
        file="$(cat)"
        apply_requirements 0 $num_files 0
    fi

}

function get_flags() {
    local opt
    error=0
    while getopts ":abgsh" opt; do
        case $opt in
        a)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                a=$nextopt
            else
                a=""
            fi
            after
            ;;
        b)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                b=$nextopt
            else
                b=""
            fi
            before
            ;;
        g)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                g=$nextopt
            else
                g=""
            fi
            gender
            ;;

        s)
            eval nextopt=\${$OPTIND}
            if [[ -n $nextopt && $nextopt != -* ]]; then
                OPTIND=$((OPTIND + 1))
                s=$nextopt
            else
                s=$DEFAULT_WIDTH
            fi
            sgraph
            ;;
        h) help ;;
        esac
    done
    if [ $error = 1 ]; then
        exit 1
    fi
}

function after() {
    if [ -z $a ]; then
        echo "Parameter to flag -a is required"
        error=1
        return
    fi
    echo "TODO validate after format date"
}

function before() {
    if [ -z $b ]; then
        echo "Parameter to flag -b is required"
        error=1
        return
    fi
    echo "TODO validate before format date"
}

function gender() {
    if [ -z $g ]; then
        echo "Parameter to flag -g is required"
        error=1
        return
    fi
    echo "TODO validate gender format"
}

function sgraph() {
    echo "S $s"
}

function help() {
    echo "Help"
    exit 0
}

function set_command() {
    eval cmd=\${$OPTIND}
    case $cmd in
    infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions) OPTIND=$((OPTIND + 1)) ;;
    *) cmd=0 ;;
    esac
    echo "$cmd"
}

function process_files() {
    file=""
    while true; do
        eval param=\${$OPTIND}
        if [ -z $param ]; then
            break
        else
            OPTIND=$((OPTIND + 1))
            num_files=$((num_files + 1))
            if [ $num_files != 1 ]; then
                param=$(awk '{if (NR!=1) {print}}' $param)
                file="$file 
$param"
            else
                file="$(cat "$param")"
            fi
        fi
    done
    apply_requirements
    apply_commands
}

function apply_requirements {

    if [ $cmd = "merge" ]; then
        echo "$file" | awk '{if (NR==1) {print}}'
    fi

    filtered_output=$(echo "$file" | awk -F "," -v after_date=$a -v before_date=$b -v gender=$g -v size_graph=$s '
        {
            if (NR>1)
            {
                # apply filters if there are any
                    if (length(after_date) > 0) {
                        if (after_date > $2) {
                            {next}
                        }
                    }
                    if (length(before_date) > 0) {
                        if (before_date < $2) {
                            {next}
                        }
                    }
                    if (length(gender) > 0) {
                        if (gender != $4) {
                            {next}
                        }
                    }

                #apply function if there is one
                {print}
            }
        }
    ')

}

function apply_commands {
    case $cmd in
    infected)
        echo "$filtered_output";
        break
        ;;
    merge)
        echo "$filtered_output";
        break
        ;;
    gender)
        echo "$filtered_output";
        break
        ;;
    age)
        echo "$filtered_output";
        break
        ;;
    daily)
        echo "$filtered_output";
        break
        ;;
    monthly)
        echo "$filtered_output";
        break
        ;;
    yearly)
        echo "$filtered_output";
        break
        ;;
    countries)
        echo "$filtered_output";
        break
        ;;
    districts)
        echo "$filtered_output";
        break
        ;;
    regions)
        echo "$filtered_output";
        break
        ;;
    0)
        echo "$filtered_output";
        break
        ;;
    esac
}

main $@
